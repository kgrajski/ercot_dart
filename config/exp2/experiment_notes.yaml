# Experiment 2 Documentation
metadata:
  created_date: "2024-12-19"
  author: "kag"
  status: "in_progress"
  last_updated: "2024-12-19"

description: |
  Classification-based DART price prediction experiment inspired by Wang et al. (2024).
  Focus: Trading strategy optimization through directional price movement classification.

important_notes: |
  Classification Strategy:
  Inspired by "Deep Learning-Based Electricity Price Forecast for Virtual Bidding" (Wang et al., 2024)
  - Pivot from regression to classification for trading strategy optimization
  - Multiple classification strategies: sign_only, threshold, kmeans, manual
  - Enhanced temporal features with cyclical encoding
  - Cross-hour analysis for optimal trading hour identification

  Hour Numbering Consistency:
  - ERCOT: Uses 1-24 (where hour 24 is midnight)  
  - Python datetime: Uses 0-23 (where hour 0 is midnight)
  - hour_local: 0-23 (start of delivery hour)
  - end_of_hour: 1-24 (end of delivery hour, for labeling)

data_sources:
  - processed_dam_spp_clean
  - processed_dam_system_lambda_clean
  - processed_load_forecast_clean
  - processed_wind_power_gen_clean
  - processed_solar_power_gen_clean
  - processed_rt_spp_transformed  # Contains hourly statistics

workflow_steps:
  study_dataset: "03-kag-exp2-ercot-study-dataset.py"
  model_train: "04-kag-exp2-ercot-modeling.py"

implementation_status:
  completed:
    - âœ… Classification-focused dataset architecture
    - âœ… Model-agnostic temporal feature engineering
    - âœ… Enhanced cyclical encoding (hour, day, week, month, year)
    - âœ… Texas-specific holiday calendar with market anticipation
    - âœ… Holiday proximity features (pre/post holiday, holiday week)
    - âœ… Multiple classification strategies (sign_only, threshold, kmeans, manual)
    - âœ… BaseClassificationModel with flexible target transformation
    - âœ… XGBoostClassificationModel with cross-hour analysis
    - âœ… Model-agnostic CrossHourAnalyzer framework
    - âœ… Professional plotly visualization system alignment
    - âœ… Classification-specific evaluation metrics
    - âœ… Pattern stability analysis with noise sensitivity testing
    - âœ… Exp2ModelTrainer with factory pattern
  
  in_progress:
    - ðŸ”„ Temporal feature extraction from models to features package
    - ðŸ”„ Enhanced temporal features integration
    - ðŸ”„ Cross-hour analysis report generation
  
  features:
    dependent_vars: ["dart_slt_class"]  # Classification target
    temporal_features:
      cyclical: ["hour_sin", "hour_cos", "dow_sin", "dow_cos", "doy_sin", "doy_cos", "month_sin", "month_cos", "woy_sin", "woy_cos"]
      holiday: ["is_holiday", "is_pre_holiday", "is_post_holiday", "is_holiday_week", "is_major_holiday", "is_federal_holiday", "days_to_holiday", "days_from_holiday"]
    lag_hours: [24, 25, 26, 27, 168]
    roll_hours: [168, 336, 504]  # 7d, 14d, 21d
    independent_vars: 
      - "dart_slt_lag_*hr"
      - "dart_slt_roll_mean_*hr" 
      - "dart_slt_roll_sdev_*hr"
      - "load_forecast_*_slt"
      - "wind_generation_*_slt"
      - "solar_*_slt"
      - Enhanced temporal features (cyclical + holiday)

key_decisions:
  - Classification approach for trading strategy optimization
  - Model-agnostic temporal feature engineering in BaseClassificationModel
  - CrossHourAnalyzer for reusable analysis across model types
  - Protocol-based design for model compatibility
  - Professional plotly visualization system (no matplotlib/seaborn)
  - Enhanced holiday features with Texas-specific calendar

findings:
  - Classification provides more actionable trading signals than regression
  - Cyclical encoding captures temporal patterns effectively
  - Holiday proximity features provide market anticipation signals
  - Cross-hour analysis reveals optimal trading opportunities
  - Model-agnostic design enables easy extension to new classifiers

architecture_notes:
  violation_fixed: "Removed matplotlib/seaborn imports, aligned with plotly-only visualization system"
  code_duplication_resolved: "Extracted cross-hour analysis to reusable CrossHourAnalyzer class"
  temporal_features_location: "BaseClassificationModel._add_enhanced_temporal_features() - needs refactoring to src/features"

next_steps: 
  - Refactor temporal features from models to src/features package
  - Complete cross-hour analysis integration
  - Add Random Forest and other classification models
  - Implement trading strategy backtesting
  - Enhanced performance dashboards with confusion matrices 